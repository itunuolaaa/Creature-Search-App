** start of undefined **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>RPG Creature Search App</title>
   <link rel="stylesheet" href="styles.css">
</head>
<body>
  <h1>RPG Creature Search App</h1>

  <input type="text" id="search-input" placeholder="Enter creature name or ID" required />
  <button id="search-button">Search</button>

  <div id="creature-info">
    <h2 id="creature-name"></h2>
    <p><strong>ID:</strong> <span id="creature-id"></span></p>
    <p><strong>Weight:</strong> <span id="weight"></span></p>
    <p><strong>Height:</strong> <span id="height"></span></p>
    <p><strong>Types:</strong> <span id="types"></span></p> <!-- âœ… THIS MATTERS -->
    <p><strong>HP:</strong> <span id="hp"></span></p>
    <p><strong>Attack:</strong> <span id="attack"></span></p>
    <p><strong>Defense:</strong> <span id="defense"></span></p>
    <p><strong>Special Attack:</strong> <span id="special-attack"></span></p>
    <p><strong>Special Defense:</strong> <span id="special-defense"></span></p>
    <p><strong>Speed:</strong> <span id="speed"></span></p>
  </div>

  <script src="script.js"></script>
</body>
</html>

** end of undefined **

** start of undefined **

const creatures = {
  "pyrolynx": {
    name: "PYROLYNX",
    id: 1,
    weight: 42,
    height: 32,
    types: ["FIRE"],
    stats: {
      hp: 65,
      attack: 80,
      defense: 50,
      specialAttack: 90,
      specialDefense: 55,
      speed: 100
    }
  },
  "aquoroc": {
    name: "AQUOROC",
    id: 2,
    weight: 220,
    height: 53,
    types: ["WATER", "ROCK"],
    stats: {
      hp: 85,
      attack: 90,
      defense: 120,
      specialAttack: 60,
      specialDefense: 70,
      speed: 40
    }
  }
};

document.getElementById("search-button").addEventListener("click", () => {
  const rawInput = document.getElementById("search-input").value.trim();
  let creature;

  if (!isNaN(rawInput)) {
    // Search by ID
    creature = Object.values(creatures).find(c => c.id == rawInput);
  } else {
    // Search by name (case-insensitive)
    creature = creatures[rawInput.toLowerCase()];
  }

  const typesEl = document.getElementById("types");
  typesEl.innerHTML = ""; // Clear previous types

  if (!creature) {
    alert("Creature not found");
    return;
  }

  document.getElementById("creature-name").textContent = creature.name;
  document.getElementById("creature-id").textContent = "#" + creature.id;
  document.getElementById("weight").textContent = creature.weight;
  document.getElementById("height").textContent = creature.height;

  // Add creature types as <span> elements
  creature.types.forEach(type => {
    const typeEl = document.createElement("span");
    typeEl.textContent = type;
    typesEl.appendChild(typeEl);
  });

  const stats = creature.stats;
  document.getElementById("hp").textContent = stats.hp;
  document.getElementById("attack").textContent = stats.attack;
  document.getElementById("defense").textContent = stats.defense;
  document.getElementById("special-attack").textContent = stats.specialAttack;
  document.getElementById("special-defense").textContent = stats.specialDefense;
  document.getElementById("speed").textContent = stats.speed;
});

** end of undefined **

** start of undefined **

* {
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #1e1e2f;
      color: #f0f0f0;
      padding: 30px 20px;
      max-width: 600px;
      margin: auto;
    }

    h1 {
      text-align: center;
      color: #ff6f61;
    }

    input, button {
      padding: 12px;
      margin-top: 10px;
      margin-bottom: 20px;
      width: 100%;
      border: none;
      border-radius: 8px;
      font-size: 16px;
    }

    input {
      background: #2c2c3f;
      color: #f0f0f0;
    }

    button {
      background-color: #ff6f61;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    button:hover {
      background-color: #e35a50;
    }

    #creature-info {
      background: #2a2a3d;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.4);
    }

    #creature-info p {
      margin: 8px 0;
    }

    #creature-info h2 {
      margin-top: 0;
      color: #ffd166;
      text-align: center;
    }

    #types span {
      background: #44475a;
      color: #fff;
      padding: 4px 10px;
      border-radius: 12px;
      margin-right: 5px;
      display: inline-block;
      font-size: 14px;
    }

** end of undefined **

